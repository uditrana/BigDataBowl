{"cells":[{"metadata":{},"cell_type":"markdown","source":"# implementing a field control model with NFL tracking data  \nAdam Sonty [@sonty_1](https://twitter.com/sonty_1)"},{"metadata":{},"cell_type":"markdown","source":"in this notebook, we'll demonstrate how to:\n- use the various Big Data Bowl datasets to access plays of our choosing\n- convert the polar data columns within the tracking data to Cartesian (and animate a play to check the conversion was done correctly)\n- implement a field control model that was originally used for soccer analytics (and animate this as well)\n\nlet's get into it"},{"metadata":{},"cell_type":"markdown","source":"## load dependencies and relevant datasets"},{"metadata":{"_uuid":"051d70d956493feee0c6d64651c6a088724dca2a","_execution_state":"idle","trusted":true},"cell_type":"code","source":"# load dependencies\nlibrary(tidyverse) # metapackage of all tidyverse packages\nlibrary(gganimate)\nlibrary(mvtnorm)\n\n# plot image settings\noptions(repr.plot.width=20, repr.plot.height = 10)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"df_games <- suppressMessages(readr::read_csv(\"../input/nfl-big-data-bowl-2021/games.csv\"))\ndf_games %>% head(1)\ndf_games %>% colnames()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"df_plays <- suppressMessages(readr::read_csv(\"../input/nfl-big-data-bowl-2021/plays.csv\"))\ndf_plays %>% head(1)\ndf_plays %>% colnames()","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"## choosing a play to work with"},{"metadata":{},"cell_type":"markdown","source":"in honor of Alex Smith's return to the playing field, I want to work with a positive play that he made in that 2018 season  \nI'll use `df_plays` to find such a play"},{"metadata":{"trusted":true},"cell_type":"code","source":"team_ <- \"WAS\"\nqb_ <- \"A.Smith\"\nmin_offense_play_result <- 25\n\ndf_plays %>% \n    dplyr::filter(possessionTeam == team_,\n                  stringr::str_detect(playDescription, qb_),\n                  offensePlayResult > min_offense_play_result) %>%\n    dplyr::arrange(-offensePlayResult) %>%\n    dplyr::select(gameId, playId, possessionTeam, playDescription, absoluteYardlineNumber, yardsToGo)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"that first play is unfortunate, so I'll use the second instead  \nit's all good, there's something sweet about showcasing that Alex Smith -> Vernon Davis connection anyway"},{"metadata":{"trusted":true},"cell_type":"code","source":"play_ <- df_plays %>% \n    dplyr::filter(possessionTeam == team_,\n                  stringr::str_detect(playDescription, qb_),\n                  offensePlayResult > min_offense_play_result) %>%\n    dplyr::arrange(-offensePlayResult) %>%\n    dplyr::select(gameId, playId, possessionTeam, playDescription, absoluteYardlineNumber, yardsToGo) %>%\n    dplyr::slice(2)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"## getting the play's tracking data"},{"metadata":{},"cell_type":"markdown","source":"the play tracking data is split up by week, so I'll use `df_games` to figure out which week contains my play, and then load the data for my play"},{"metadata":{"trusted":true},"cell_type":"code","source":"game_ <- df_games %>%\n    dplyr::filter(gameId == play_$gameId)\n\ngame_","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"looks like the play occurred during week 3  \nnow, I'll read in the tracking data from week 3, and then filter it down to just my play"},{"metadata":{"trusted":true},"cell_type":"code","source":"tracking_data_file = paste(\"../input/nfl-big-data-bowl-2021/week\", game_$week, \".csv\", sep = \"\")\n\ndf_track <- suppressMessages(readr::read_csv(tracking_data_file)) %>%\n    dplyr::filter(gameId == play_$gameId, playId == play_$playId)\n\ndf_track %>% head()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"df_track %>% nrow()","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"we've got our data, but it's larger than it needs to be. let's trim it down wherever we can (this is something we should always be trying to do when working with datasets this large  \nfor the field control model I'll be implementing, I really only need `x`, `y`, `s`, `dir`, `event`, `displayName`, `jerseyNumber`, `frameId`, and `team` (I'm not saying the other variables aren't valuable, just that they're not needed for this use case)"},{"metadata":{"trusted":true},"cell_type":"code","source":"play_direction_ <- df_track %>% head(1) %>% dplyr::pull(playDirection)\n\ndf_track <- df_track %>%\n    dplyr::select(x, y, s, dir, event, displayName, jerseyNumber, frameId, team)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"it's worth noting that players' positional data is provided in a Cartesian format, but their movement is in polar coordinates. I'm going to convert everything to Cartesian because it's just easier for me to sanity-check"},{"metadata":{"trusted":true},"cell_type":"code","source":"df_track <- df_track %>%\n    dplyr::mutate(\n        dir_rad = dir * pi / 180,\n        v_x = sin(dir_rad) * s,\n        v_y = cos(dir_rad) * s,\n        v_theta = atan(v_y / v_x),\n        v_theta = ifelse(is.nan(v_theta), 0, v_theta),\n        team_name = case_when(\n            team == \"home\" ~ game_$homeTeamAbbr,\n            team == \"away\" ~ game_$visitorTeamAbbr,\n            TRUE ~ team,\n        )\n    ) %>%\n    dplyr::select(frameId, event, team = team_name, jerseyNumber, displayName, x, y, s, v_theta, v_x, v_y)\n\ndf_track %>% head(5)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"and there's the play data  \n  \nnow, I'm going to animate it, just to make sure everything is copacetic  \nto create the animation, I'm going to write a few helper functions:\n1. `plot_field()` - create a base NFL field in ggplot\n2. `fetch_team_colors()` - get the hex color codes for the 2 teams in my play"},{"metadata":{"trusted":true},"cell_type":"code","source":"plot_field <- function(field_color=\"#ffffff\", line_color = \"#212529\", number_color = \"#adb5bd\") {\n  field_height <- 160/3\n  field_width <- 120\n  \n  field <- ggplot() +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(size = 13, hjust = 0.5),\n      plot.subtitle = element_text(hjust = 1),\n      legend.position = \"bottom\",\n      legend.title.align = 1,\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      axis.title = element_blank(),\n      axis.ticks = element_blank(),\n      axis.text = element_blank(),\n      axis.line = element_blank(),\n      panel.background = element_rect(fill = field_color, color = \"white\"),\n      panel.border = element_blank(),\n      aspect.ratio = field_height/field_width\n    ) +\n    # major lines\n    annotate(\n      \"segment\",\n      x = c(0, 0, 0,field_width, seq(10, 110, by=5)),\n      xend = c(field_width,field_width, 0, field_width, seq(10, 110, by=5)),\n      y = c(0, field_height, 0, 0, rep(0, 21)),\n      yend = c(0, field_height, field_height, field_height, rep(field_height, 21)),\n      colour = line_color\n    ) +\n    # hashmarks\n    annotate(\n      \"segment\",\n      x = rep(seq(10, 110, by=1), 4),\n      xend = rep(seq(10, 110, by=1), 4),\n      y = c(rep(0, 101), rep(field_height-1, 101), rep(160/6 + 18.5/6, 101), rep(160/6 - 18.5/6, 101)),\n      yend = c(rep(1, 101), rep(field_height, 101), rep(160/6 + 18.5/6 + 1, 101), rep(160/6 - 18.5/6 - 1, 101)),\n      colour = line_color\n    ) +\n    # yard numbers\n    annotate(\n      \"text\",\n      x = seq(20, 100, by = 10),\n      y = rep(12, 9),\n      label = c(seq(10, 50, by = 10), rev(seq(10, 40, by = 10))),\n      size = 10,\n      colour = number_color,\n    ) +\n    # yard numbers upside down\n    annotate(\n      \"text\",\n      x = seq(20, 100, by = 10),\n      y = rep(field_height-12, 9),\n      label = c(seq(10, 50, by = 10), rev(seq(10, 40, by = 10))),\n      angle = 180,\n      size = 10,\n      colour = number_color, \n    )\n  \n  return(field)\n}\n\n\nfetch_team_colors <- function(team_colors_=NULL, h_team_, a_team_, diverge_=FALSE) {\n    colors_url <- \"https://raw.githubusercontent.com/asonty/ngs_highlights/master/utils/data/nfl_team_colors.tsv\"\n    \n    if (is.null(team_colors_)) {\n        team_colors_ <- suppressMessages(readr::read_tsv(colors_url))\n    }\n  \n    h_team_color1 <- team_colors_ %>% filter(teams == h_team_) %>% pull(color1)\n    h_team_color2 <- team_colors_ %>% filter(teams == h_team_) %>% pull(color2)\n    a_team_color1 <- team_colors_ %>% filter(teams == a_team_) %>% pull(color1)\n    a_team_color2 <- team_colors_ %>% filter(teams == a_team_) %>% pull(color2)\n  \n    if (diverge_ == TRUE) {\n        h_team_color1_family <- team_colors_ %>% filter(teams == h_team_) %>% select(color1_family) %>% pull()\n        a_team_color1_family <- team_colors_ %>% filter(teams == a_team_) %>% select(color1_family) %>% pull()\n    \n        if (h_team_color1_family == a_team_color1_family) {\n            a_team_color1 <- team_colors_ %>% filter(teams == a_team_) %>% select(color2) %>% pull()\n          a_team_color2 <- team_colors_ %>% filter(teams == a_team_) %>% select(color1) %>% pull()\n        }\n    }\n    \n    df_colors <- tibble(\n        home_1 = h_team_color1, home_2 = h_team_color2, away_1 = a_team_color1, away_2 = a_team_color2\n    )\n    \n  \n    return(df_colors)\n}","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"if (play_direction_ == \"left\") {\n    line_of_scrimmage = play_$absoluteYardlineNumber\n    to_go_line = line_of_scrimmage - play_$yardsToGo\n} else {\n    line_of_scrimmage = 100 - play_$absoluteYardlineNumber\n    to_go_line = line_of_scrimmage + play_$yardsToGo\n}\n\ndf_colors <- fetch_team_colors(h_team_ = game_$homeTeamAbbr, a_team_ = game_$visitorTeamAbbr, diverge_ = T)\n\nplay_frames <- plot_field() + \n    # line of scrimmage\n    annotate(\n        \"segment\",\n        x = line_of_scrimmage, xend = line_of_scrimmage, y = 0, yend = 160/3,\n        colour = \"#0d41e1\", size = 1.5\n    ) +\n    # 1st down marker\n    annotate(\n        \"segment\",\n        x = to_go_line, xend = to_go_line, y = 0, yend = 160/3,\n        colour = \"#f9c80e\", size = 1.5\n    ) +\n    # away team velocities\n    geom_segment(\n        data = df_track %>% dplyr::filter(team == game_$visitorTeamAbbr),\n        mapping = aes(x = x, y = y, xend = x + v_x, yend = y + v_y),\n        colour = df_colors$away_1, size = 1, arrow = arrow(length = unit(0.01, \"npc\"))\n    ) + \n    # home team velocities\n    geom_segment(\n        data = df_track %>% dplyr::filter(team == game_$homeTeamAbbr),\n        mapping = aes(x = x, y = y, xend = x + v_x, yend = y + v_y),\n        colour = df_colors$home_2, size = 1, arrow = arrow(length = unit(0.01, \"npc\"))\n    ) +\n    # away team locs and jersey numbers\n    geom_point(\n        data = df_track %>% dplyr::filter(team == game_$visitorTeamAbbr),\n        mapping = aes(x = x, y = y),\n        fill = \"#f8f9fa\", colour = df_colors$away_2,\n        shape = 21, alpha = 1, size = 8, stroke = 1.5\n    ) +\n    geom_text(\n        data = df_track %>% dplyr::filter(team == game_$visitorTeamAbbr),\n        mapping = aes(x = x, y = y, label = jerseyNumber),\n        colour = df_colors$away_1, size = 4.5\n    ) +\n    # home team locs and jersey numbers\n    geom_point(\n        data = df_track %>% dplyr::filter(team == game_$homeTeamAbbr),\n        mapping = aes(x = x, y = y),\n        fill = df_colors$home_1, colour = df_colors$home_2,\n        shape = 21, alpha = 1, size = 8, stroke = 1.5\n    ) +\n    geom_text(\n        data = df_track %>% dplyr::filter(team == game_$homeTeamAbbr),\n        mapping = aes(x = x, y = y, label = jerseyNumber),\n        colour = df_colors$home_2, size = 4.5, \n    ) +\n    # ball\n    geom_point(\n        data = df_track %>% dplyr::filter(team == \"football\"),\n        mapping = aes(x = x, y = y),\n        fill = \"#935e38\", colour = \"#d9d9d9\",\n        shape = 21, alpha = 1, size = 4, stroke = 1\n    ) +\n    # title \n    labs(title = play_$playDescription) +\n    # animation stuff\n    transition_time(frameId)  +\n    ease_aes('linear') + \n    NULL\n\nplay_length <- length(unique(df_track$frameId))\nplay_anim <- animate(\n  play_frames,\n  fps = 10, \n  nframe = play_length,\n  width = 800,\n  height = 400,\n  end_pause = 0\n)\n\nplay_anim","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"looks alright, although it is odd to see LBs that are rushing the passer (and likely being blocked by the OL) just drifting off (since the OL isn't included in the dataset)  \n  \non to **field control**"},{"metadata":{},"cell_type":"markdown","source":"## implementing a field control model"},{"metadata":{},"cell_type":"markdown","source":"I'll be implementing the first layer of the field control model created by Javier Fernandes (F.C. Barcelona) and Luke Bornn (Sacramento Kings) in their seminal work, [Wide Open Spaces: A statistical technique for measuringspace creation in professional soccer](http://www.sloansportsconference.com/wp-content/uploads/2018/03/1003.pdf)  \n\nI won't go deep into the math in this notebook, instead I'll just focus on the code  \nfor a more detailed look at the intuition and math behind the model, I'd recommend reading this [excellent blog post](https://www.robert-hickman.eu/post/fall_back_in_to_space/) by Robert Hickman"},{"metadata":{},"cell_type":"markdown","source":"to implement the field control model, the data will need to go through a few more steps in preprocessing:\n1. compute each player's distance from the ball at each frame\n2. compute each player's speed ratio (against some max speed)\n3. compute each player's 'next' location based on their current trajectories\n4. compute each player's radius of influence for a given frame  \n  \nlet's knock these out"},{"metadata":{"trusted":true},"cell_type":"code","source":"# 1. compute player's distance from ball\ncompute_distance_from_ball <- function(tracking_data) {\n    tracking_data <- tracking_data %>%\n        dplyr::inner_join(\n            tracking_data %>%\n                dplyr::filter(team == \"football\") %>%\n                dplyr::select(frameId, ball_x = x, ball_y = y),\n              by = \"frameId\"\n        ) %>%\n        dplyr::mutate(\n            distance_from_ball = sqrt((x-ball_x)^2 + (y-ball_y)^2)\n        ) %>% \n        dplyr::select(-ball_x, -ball_y)\n    return(tracking_data)\n}\n\ndf_track <- df_track %>% compute_distance_from_ball()\ndf_track %>% head(5)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# 2. compute each player's speed ratio\n#    here we're using a max speed of 13 yds/s, \n#    which about lines up with the max speeds seen in \n#    the Next Gen Stats Fastest Ballcarrier tables\ncompute_speed_ratio <- function(tracking_data, s_max = 13.00) {\n    tracking_data <- tracking_data %>%\n        dplyr::mutate(\n            s_ratio = s / s_max\n        )\n    return(tracking_data)\n}\n\ndf_track <- df_track %>% compute_speed_ratio() \ndf_track %>% head(5)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# 3. compute each player's next location\ncompute_next_loc <- function(tracking_data, delta_t = 0.50) {\n    tracking_data <- tracking_data %>%\n        dplyr::mutate(\n            x_next = x + v_x * delta_t,\n            y_next = y + v_y * delta_t\n    )\n    return(tracking_data)\n}\n\ndf_track <- df_track %>% compute_next_loc()\ndf_track %>% head(5)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# 4. compute each player's radius of influence for a given frame\n#    here we're using a model that approximates the plot shown in\n#    the appendix of Wide Open Spaces. this original function was\n#    found by Will Thomson. the modification that I'll make is that\n#    I'll add a few parameters to the equation, so we can alter the\n#    min/max radius of influence a player can have, as well as the\n#    rate at which that radius changes (based on their proximity \n#    to the ball)\ncompute_radius_of_influence <- function(tracking_data,\n                                        min_radius = 4.00,\n                                        max_radius = 10.00,\n                                        max_distance_from_ball = 20.00) {\n    tracking_data <- tracking_data %>%\n        dplyr::mutate(\n            radius_of_influence = min_radius + distance_from_ball^3 * (max_radius-min_radius) / max_distance_from_ball,\n            radius_of_influence = dplyr::case_when(\n                radius_of_influence > max_radius ~ max_radius,\n                TRUE ~ radius_of_influence\n        )\n    )\n    return(tracking_data)\n}\n\ndf_track <- df_track %>% compute_radius_of_influence()\ndf_track %>% head(5)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"now we can go about creating each player's zone of influence  \n  \nthe paper models a player's zone of influence as a 2-dimensional normal distribution, which is 'warped' based on the player's velocity and distance from the football  \nthis warping is conveyed through the mean and covariance of the distribution  \n- the mean is just the estimated location of the player after 0.5 seconds (which we've already computed), and\n- the covariance matrix (which controls the shape of the distribution) is computed by multiplication of a rotation matrix (R -- based on the direction the player is moving) and a scaling matrix (S -- based on the player's speed ratio and distance from the ball)  \n  \nsince we've already computed the distribution's mean, we just have to compute the covariance matrix (Sigma)"},{"metadata":{"trusted":true},"cell_type":"code","source":"compute_rotation_matrix <- function(v_theta) {\n     R <- matrix(\n        c(cos(v_theta), -sin(v_theta),\n          sin(v_theta),  cos(v_theta)),\n        nrow = 2,\n        byrow = TRUE\n     )\n     return(R)\n}\n\ncompute_scaling_matrix <- function(radius_of_influence, s_ratio) {\n    S <- matrix(\n        c(radius_of_influence * (1 + s_ratio), 0,\n          0, radius_of_influence * (1 - s_ratio)),\n        nrow = 2,\n        byrow = TRUE\n    )\n    return(S)\n}\n\ncompute_covariance_matrix <- function(v_theta, radius_of_influence, s_ratio) {\n      R <- compute_rotation_matrix(v_theta)\n      S <- compute_scaling_matrix(radius_of_influence, s_ratio)\n      Sigma <- R %*% S %*% S %*% solve(R)\n      return(Sigma)\n}\n\n# note that this is meant operate on just 1 row of the tracking dataset\ncompute_player_zoi <- function(player_frame_tracking_data, field_grid = NULL) {\n    if(is.null(field_grid)) {\n        field_grid <- expand_grid(\n          x = seq(0, 120, length.out = 120),\n          y = seq(0, 160/3, length.out = 160/3)\n        )\n    }\n\n    frameId_ <- player_frame_tracking_data %>% pull(frameId)\n    displayName_ <- player_frame_tracking_data %>% pull(displayName) \n    jerseyNumber_ <- player_frame_tracking_data %>% pull(jerseyNumber) \n    team_ <- player_frame_tracking_data %>% pull(team) \n\n    zoi_center_x_ <- player_frame_tracking_data %>% pull(x_next)\n    zoi_center_y_ <- player_frame_tracking_data %>% pull(y_next)\n    v_theta_ <- player_frame_tracking_data %>% pull(v_theta)\n    radius_of_influence_ <- player_frame_tracking_data %>% pull(radius_of_influence)\n    s_ratio_ <- player_frame_tracking_data %>% pull(s_ratio)\n\n    mu <- c(zoi_center_x_, zoi_center_y_)\n    Sigma <- compute_covariance_matrix(v_theta_, radius_of_influence_, s_ratio_)\n\n    player_zoi <- field_grid %>%\n    dplyr::mutate(\n        influence = mvtnorm::dmvnorm(x = field_grid, mean = mu, sigma = Sigma),\n        influence = influence / max(influence),\n        frameId = frameId_,\n        displayName = displayName_,\n        jerseyNumber = jerseyNumber_,\n        team = team_\n    )\n\n    return(player_zoi)\n}","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"now that we can compute a player's zone of influence for a frame, we need to aggregate and compute team field control for a frame"},{"metadata":{"trusted":true},"cell_type":"code","source":"compute_team_frame_control <- function(frame_tracking_data, home_team) {\n    team_frame_control <- frame_tracking_data %>%\n        dplyr::filter(team != \"football\") %>%\n        dplyr::group_split(displayName) %>%\n        purrr::map_dfr(., compute_player_zoi) %>%\n        dplyr::mutate(\n            influence = dplyr::case_when(\n                team == home_team ~ -1 * influence,\n                TRUE ~ influence\n            )\n        ) %>%\n        dplyr::group_by(frameId, x, y) %>%\n        dplyr::summarise(control = sum(influence), .groups = \"keep\") %>%\n        dplyr::mutate(control = 1 / (1 + exp(control)))\n\n    return(team_frame_control)\n}","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"this function returns control values at every location on the field.  \n`control > 0.50` indicates the home team has control of that location, and conversely  \n`control < 0.50` indicates the away team has control  \nwe can run this function over the entirety of the play and visualize how each team's regions of control fluctuate throughout the play"},{"metadata":{"trusted":true},"cell_type":"code","source":"df_control <- df_track %>%\n    dplyr::filter(team != \"football\") %>%\n    dplyr::group_split(frameId) %>%\n    purrr::map_dfr(., compute_team_frame_control, game_$homeTeamAbbr)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"play_frames <- plot_field() + \n    # field control\n    geom_raster(\n        data = df_control, \n        mapping = aes(x = x, y = y, fill = control), alpha = 0.7, interpolate = T\n    ) +\n    scale_fill_gradient2(\n        low = df_colors$away_1, high = df_colors$home_1, mid = \"white\", midpoint = 0.5, \n        name = \"Team Field Control\", limits = c(0,1), breaks = c(0, 1), labels = c(game_$visitorTeamAbbr, game_$homeTeamAbbr)\n    ) +\n    # line of scrimmage\n    annotate(\n        \"segment\",\n        x = line_of_scrimmage, xend = line_of_scrimmage, y = 0, yend = 160/3,\n        colour = \"#0d41e1\", size = 1.5\n    ) +\n    # 1st down marker\n    annotate(\n        \"segment\",\n        x = to_go_line, xend = to_go_line, y = 0, yend = 160/3,\n        colour = \"#f9c80e\", size = 1.5\n    ) +\n    # away team velocities\n    geom_segment(\n        data = df_track %>% dplyr::filter(team == game_$visitorTeamAbbr),\n        mapping = aes(x = x, y = y, xend = x + v_x, yend = y + v_y),\n        colour = df_colors$away_1, size = 1, arrow = arrow(length = unit(0.01, \"npc\"))\n    ) + \n    # home team velocities\n    geom_segment(\n        data = df_track %>% dplyr::filter(team == game_$homeTeamAbbr),\n        mapping = aes(x = x, y = y, xend = x + v_x, yend = y + v_y),\n        colour = df_colors$home_2, size = 1, arrow = arrow(length = unit(0.01, \"npc\"))\n    ) +\n    # away team locs and jersey numbers\n    geom_point(\n        data = df_track %>% dplyr::filter(team == game_$visitorTeamAbbr),\n        mapping = aes(x = x, y = y),\n        fill = \"#f8f9fa\", colour = df_colors$away_2,\n        shape = 21, alpha = 1, size = 8, stroke = 1.5\n    ) +\n    geom_text(\n        data = df_track %>% dplyr::filter(team == game_$visitorTeamAbbr),\n        mapping = aes(x = x, y = y, label = jerseyNumber),\n        colour = df_colors$away_1, size = 4.5\n    ) +\n    # home team locs and jersey numbers\n    geom_point(\n        data = df_track %>% dplyr::filter(team == game_$homeTeamAbbr),\n        mapping = aes(x = x, y = y),\n        fill = df_colors$home_1, colour = df_colors$home_2,\n        shape = 21, alpha = 1, size = 8, stroke = 1.5\n    ) +\n    geom_text(\n        data = df_track %>% dplyr::filter(team == game_$homeTeamAbbr),\n        mapping = aes(x = x, y = y, label = jerseyNumber),\n        colour = df_colors$home_2, size = 4.5, \n    ) +\n    # ball\n    geom_point(\n        data = df_track %>% dplyr::filter(team == \"football\"),\n        mapping = aes(x = x, y = y),\n        fill = \"#935e38\", colour = \"#d9d9d9\",\n        shape = 21, alpha = 1, size = 4, stroke = 1\n    ) +\n    # title \n    labs(title = play_$playDescription) +\n    # animation stuff\n    transition_time(frameId)  +\n    ease_aes('linear') + \n    NULL\n\nplay_length <- length(unique(df_track$frameId))\nplay_anim <- animate(\n  play_frames,\n  fps = 10, \n  nframe = play_length,\n  width = 800,\n  height = 400,\n  end_pause = 0\n)\n\nplay_anim","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"and there it is: Alex Smith to Vernon Davis for a 50-yard gain, just like old times\n  \naccording to our model, Vernon Davis didn't really have control at the point of the catch. I'll leave it to you to decide on the usefulness/veracity of the model, and to potentially formulate your own improvements  \n  \nthanks for reading, happy Big Data Bowl-ing"}],"metadata":{"kernelspec":{"name":"ir","display_name":"R","language":"R"},"language_info":{"name":"R","codemirror_mode":"r","pygments_lexer":"r","mimetype":"text/x-r-source","file_extension":".r","version":"3.6.3"}},"nbformat":4,"nbformat_minor":4}